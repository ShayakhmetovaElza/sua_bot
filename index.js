const TelegramApi = require("node-telegram-bot-api")
require("dotenv").config()
const helper = require("./helper")
const sequelize = require("./db")
const questions = require("./questions")
const { CronJob } = require("cron");



const bot = new TelegramApi(process.env.TOKEN,  { polling: true })

const sendMsg = async(chat_id, text, keyboard) => {
    await bot.sendMessage(chat_id, text, {
        parse_mode: "Markdown",
        reply_markup : {
            inline_keyboard: keyboard
        }
    })
}

const editMsg = async(chat_id, text, keyboard, message_id) => {
    await bot.editMessageText(text, {
        chat_id,
        message_id,
        parse_mode: "Markdown",
        reply_markup: { inline_keyboard: keyboard }
    })
}



const getQuestionMsg = (index) => {
    const item = questions[index]
    const text = item?.text

    switch (item.type) {
        case "text": { return { text, keyboard: [] } }
        case "radiogroup": { return { text, keyboard: item.choices } }
    }
}


const start = async() => {

    try {
        await sequelize.authenticate()
        await sequelize.sync()

    } catch(e) {
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
        console.log(e)
    }

    helper.logoStart()

    bot.setMyCommands([
        { command: "/start", description: "–ù–∞—á–∞—Ç—å" },
    ])

    bot.on( "message", async msg => {
        const chat_id = msg.chat.id
        const msg_text = msg.text

        try {

            if ( msg_text === "/start" ) {
                const first_name = msg.from.first_name ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

                const textHello = `–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è, ${first_name}! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∞ –Ω–∞—à –±—Ä–µ–Ω–¥!\n` +
                    '–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è –ø–æ–¥–∞—Ä–æ–∫: –æ–±—Ä–∞–∑—ã –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–ª–∏—Å—Ç–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n';
                    
                await helper.setUser(chat_id, {name_user: first_name})
                await sendMsg( chat_id, textHello);

                return sendMsg(
                    chat_id, 
                    '–ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ ü§ç', 
                    [[{ text: "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫", callback_data: "q_0" }]]
                )
            }

            if ( msg_text === "/send_msg" && chat_id == process.env.ADMIN_ID ) {
                await helper.setUser(chat_id, { status: 1 });
                return sendMsg( chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:');
            }

            const user = await helper.getUser(chat_id);
            const statusUser = user?.status

            if ( statusUser == 1 && chat_id == process.env.ADMIN_ID ) {

                const text = msg.text;
                const entities = msg.entities

                await sendMsg( chat_id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç:');

                try {

                    await bot.sendMessage(chat_id, text, {
                        entities,
                        reply_markup : {
                            inline_keyboard: [
                                [{ text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data: "admin_send"}],
                                [{ text: '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å', callback_data: "admin_no"}],
                            ]
                        }
                    })

                } catch {
                    await sendMsg(chat_id, "–û—à–∏–±–∫–∞ —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã!")
                    await bot.sendPhoto(chat_id, './rule.png')
                }

                return console.log("–¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–∑–¥–∞–Ω!");
            }

            return console.log("–Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π") 

        } catch (e) {
            console.log(e)
            return bot.sendMessage(
                chat_id, 
                "_–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞..._\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ /start",
                { parse_mode: "Markdown" }
            )
        }
    })

    
    bot.on("callback_query", async query => {
        const chat_id = query.message.chat.id
        const message_id = query.message.message_id
        const data = query.data

        try { 

            if ( data == 'admin_send' && chat_id == process.env.ADMIN_ID ) {
                await editMsg(chat_id, '*–ù–∞—á–∞–ª—Å—è –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...*', [], message_id);
                await helper.setUser(chat_id, {status: 3})

                const sendText = query.message.text;
                const entities = query.message.entities;
                const usersByDelivered = await helper.getChatIds() ?? [];
                let count = 0;

                const job = CronJob.from({
                    cronTime: '*/3 * * * *',
                    onTick: async () => {
                        if (!usersByDelivered?.length) {
                            job.stop();
                            return;
                        }

                        const sendJob = CronJob.from({
                            cronTime: '*/1 * * * * *',
                            onTick: async () => {
                                const rangeUsers = usersByDelivered.splice(0,20);
                                count++;
                                
                                for await ( item of rangeUsers ) {
                                    const userId = item.chat_id
                                    try {
                                        await bot.sendMessage(userId, sendText, {entities})
                                    } catch(e) {
                                        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - ${userId}`)
                                    }
                                }
        
                                if (count == 60 || !usersByDelivered.length) {
                                    sendJob.stop();
                                    count = 0;
                                    return;
                                }
                            },
                            onComplete: async() => {
                                await sendMsg(chat_id, '–ò—Ç–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞...');
                            },
                            start: true,
                        });
                    },
                    onComplete: async() => {
                        await sendMsg(chat_id, 'üì© *–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*');
                    },
                    start: true,
                });

                return console.log('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å!')
            }

            if ( data == 'admin_no' && chat_id == process.env.ADMIN_ID ) {
                await helper.setUser(chat_id, {status: 2})
                return await editMsg(chat_id, '‚ùå *–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É*', [], message_id);
            }
            
            if ( data === "q_0") {
                const { text, keyboard } = getQuestionMsg(data);
                await editMsg(chat_id, text, keyboard, message_id);

                await bot.sendDocument(chat_id, './file.pdf')

                const { text: t1, keyboard: k1} = getQuestionMsg("q_1");
                return sendMsg( chat_id, t1, k1);
            }


            if (questions.hasOwnProperty(data)) {
                const msgText = query.message.text;
                const { text, keyboard } = getQuestionMsg(data);

                await editMsg(chat_id, msgText, [], message_id);
                return await sendMsg(chat_id, text, keyboard);
            }       
     
            return console.log("–Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π")

        } catch(e) {
            console.log(e)
            return bot.sendMessage(
                chat_id, 
                "_–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞..._\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ /start",
                { parse_mode: "Markdown" }
            )
        }
    })

}

start()

